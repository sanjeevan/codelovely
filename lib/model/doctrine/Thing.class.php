<?php

/**
 * Thing
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    frostty
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Thing extends BaseThing
{
  /**
   * We override here to fix problem with doctrine not properly caching all references
   * to Vote, when we were caching the hot/latest listing results
   * 
   * (non-PHPdoc)
   * @see plugins/sfDoctrinePlugin/lib/vendor/doctrine/Doctrine/Doctrine_Record::serializeReferences()
   */
  public function serializeReferences($bool = null)
  {
    return true;
  }
  
  /**
   * Delete this and Vote record
   * 
   * (non-PHPdoc)
   * @see plugins/sfDoctrinePlugin/lib/vendor/doctrine/Doctrine/Doctrine_Record::delete()
   */
  public function delete(Doctrine_Connection $conn = null)
  {
    $this->Vote->delete();
    parent::delete($conn);
  }
  
  /**
   * calculates the hotness of a thing
   * 
   * @return integer
   */
  public function getHotness()
  {
    $date = strtotime($this->created_at);
    $date = $date == null ? time() : $date; // incase it hasn't been saved yet!

    $s = $this->ups - $this->downs;
    $z = abs($s) >= 1 ? abs($s) : 1;
    $order = log10($z);
    $sign = $s > 0 ? 1 : ($s < 0 ? -1 : 0);
    $seconds = $date - ThingTable::START_TIME;

    return round($order + (($sign * $seconds) / ThingTable::TIME_PERIOD), 7);
  }

  public function updateScore()
  {
    $this->score = $this->ups - $this->downs;
  }
  
  /**
   * update the hotness
   * 
   * @return null
   */
  public function updateHotness()
  {
    $this->hot = $this->getHotness();
  }

  /**
   * has the user cast a vote for this thing?
   * 
   * @param $user
   * @return boolean
   */
  public function hasUserVoted(User $user)
  {
    $q = Doctrine_Query::create()
      ->from('Vote v')
      ->where('v.user_id = ? and v.thing_id = ?', array($user->getId(), $this->getId()))
      ->limit(1);
      
    $vote = $q->fetchOne();
    
    return $vote == null ? false : true;    
  }

  /**
   * Get vote object for specified user for this Thing
   * 
   * @param User $user
   * @return Vote
   */
  public function getUserVote($user)
  {
    $id = $user instanceof User ? $user->getId() : intval($user);
    
    $q = Doctrine_Query::create()
      ->from('Vote v')
      ->where('v.user_id =? and v.thing_id = ?', array($id, $this->getId()))
      ->limit(1);
      
    return $q->fetchOne();
  }
  
  /**
   * remove a vote for this thing, and recalulate hot/score
   * 
   * @param $vote
   * @return null
   */
  public function removeVote(Vote $vote)
  {
    if ($vote->type == 'up'){
      $this->ups = $this->ups - 1;
      $this->updateScore();
      $this->updateHotness();
      
      $vote->delete();
    }
    
    if ($vote->type == 'down'){
      $this->downs = $this->downs - 1;
      $this->updateScore();
      $this->updateHotness();
      
      $vote->delete();
    }
  }
  
  /**
   * vote up this thing
   * 
   * @param $user
   * @return Vote
   */
  public function voteUp(User $user)
  {
    $q = Doctrine_Query::create()
    ->from('Vote v')
    ->where('v.user_id = ? and v.thing_id = ?', array($user->id, $this->id));

    $vote = $q->fetchOne();

    // not existing vote, so create one
    if ($vote == null){
      $vote = new Vote();
      $vote->type = 'up';
      $vote->thing_id = $this->id;
      $vote->user_id = $user->id;
      $vote->save();      
      
      $this->ups = $this->ups + 1;
      $this->updateScore();
      $this->updateHotness();
    } else {
      if ($vote->type == 'up'){
        $this->removeVote($vote);
        return null;
      } else {
        $vote->type = 'up';
        $vote->save();
        
        $this->ups = $this->ups + 1;
        $this->downs = $this->downs - 1;
        $this->updateScore();
        $this->updateHotness();
      }
    }
    
    return $vote;
  }

  /**
   * vote down this thing
   * 
   * @param $user
   * @return Vote
   */
  public function voteDown(User $user)
  {
    $q = Doctrine_Query::create()
      ->from('Vote v')
      ->where('v.user_id = ? and v.thing_id = ?', array($user->id, $this->id));

    $vote = $q->fetchOne();

    // not existing vote, so create one
    if ($vote == null){
      $vote = new Vote();
      $vote->type = 'down';
      $vote->thing_id = $this->id;
      $vote->user_id = $user->id;
      $vote->save();      
      
      $this->downs = $this->downs + 1;
      $this->updateScore();
      $this->updateHotness();
    } else {
      if ($vote->type == 'down'){
        $this->removeVote($vote);
        return null;
      } else {
        $vote->type = 'down';
        $vote->save();
        
        $this->ups = $this->ups - 1;
        $this->downs = $this->downs + 1;
        $this->updateScore();
        $this->updateHotness();
      }
    }
    
    return $vote;
  }
}
