<?php

/**
 * BaseArticle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $thing_id
 * @property string $username
 * @property string $title
 * @property string $url
 * @property string $summary
 * @property string $fulldescription
 * @property string $code
 * @property string $code_language
 * @property string $question
 * @property integer $total_comments
 * @property boolean $has_thumbnails
 * @property enum $flavour
 * @property boolean $published
 * @property string $summary_html
 * @property string $fulldescription_html
 * @property string $question_html
 * @property User $User
 * @property Thing $Thing
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $FileToArticle
 * @property Doctrine_Collection $TagToArticle
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method integer             getUserId()               Returns the current record's "user_id" value
 * @method integer             getThingId()              Returns the current record's "thing_id" value
 * @method string              getUsername()             Returns the current record's "username" value
 * @method string              getTitle()                Returns the current record's "title" value
 * @method string              getUrl()                  Returns the current record's "url" value
 * @method string              getSummary()              Returns the current record's "summary" value
 * @method string              getFulldescription()      Returns the current record's "fulldescription" value
 * @method string              getCode()                 Returns the current record's "code" value
 * @method string              getCodeLanguage()         Returns the current record's "code_language" value
 * @method string              getQuestion()             Returns the current record's "question" value
 * @method integer             getTotalComments()        Returns the current record's "total_comments" value
 * @method boolean             getHasThumbnails()        Returns the current record's "has_thumbnails" value
 * @method enum                getFlavour()              Returns the current record's "flavour" value
 * @method boolean             getPublished()            Returns the current record's "published" value
 * @method string              getSummaryHtml()          Returns the current record's "summary_html" value
 * @method string              getFulldescriptionHtml()  Returns the current record's "fulldescription_html" value
 * @method string              getQuestionHtml()         Returns the current record's "question_html" value
 * @method User                getUser()                 Returns the current record's "User" value
 * @method Thing               getThing()                Returns the current record's "Thing" value
 * @method Doctrine_Collection getComments()             Returns the current record's "Comments" collection
 * @method Doctrine_Collection getFileToArticle()        Returns the current record's "FileToArticle" collection
 * @method Doctrine_Collection getTagToArticle()         Returns the current record's "TagToArticle" collection
 * @method Article             setId()                   Sets the current record's "id" value
 * @method Article             setUserId()               Sets the current record's "user_id" value
 * @method Article             setThingId()              Sets the current record's "thing_id" value
 * @method Article             setUsername()             Sets the current record's "username" value
 * @method Article             setTitle()                Sets the current record's "title" value
 * @method Article             setUrl()                  Sets the current record's "url" value
 * @method Article             setSummary()              Sets the current record's "summary" value
 * @method Article             setFulldescription()      Sets the current record's "fulldescription" value
 * @method Article             setCode()                 Sets the current record's "code" value
 * @method Article             setCodeLanguage()         Sets the current record's "code_language" value
 * @method Article             setQuestion()             Sets the current record's "question" value
 * @method Article             setTotalComments()        Sets the current record's "total_comments" value
 * @method Article             setHasThumbnails()        Sets the current record's "has_thumbnails" value
 * @method Article             setFlavour()              Sets the current record's "flavour" value
 * @method Article             setPublished()            Sets the current record's "published" value
 * @method Article             setSummaryHtml()          Sets the current record's "summary_html" value
 * @method Article             setFulldescriptionHtml()  Sets the current record's "fulldescription_html" value
 * @method Article             setQuestionHtml()         Sets the current record's "question_html" value
 * @method Article             setUser()                 Sets the current record's "User" value
 * @method Article             setThing()                Sets the current record's "Thing" value
 * @method Article             setComments()             Sets the current record's "Comments" collection
 * @method Article             setFileToArticle()        Sets the current record's "FileToArticle" collection
 * @method Article             setTagToArticle()         Sets the current record's "TagToArticle" collection
 * 
 * @package    socialhub
 * @subpackage model
 * @author     Sanjeevan Ambalavanar
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseArticle extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('article');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('thing_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('summary', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('fulldescription', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('code', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('code_language', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('question', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('total_comments', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('has_thumbnails', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('flavour', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'link',
              1 => 'code',
              2 => 'question',
              3 => 'snapshot',
             ),
             'default' => 'link',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('summary_html', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('fulldescription_html', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('question_html', 'string', null, array(
             'type' => 'string',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Thing', array(
             'local' => 'thing_id',
             'foreign' => 'id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('FileToArticle', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('TagToArticle', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}